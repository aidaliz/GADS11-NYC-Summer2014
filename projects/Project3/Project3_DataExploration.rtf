{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red29\green29\blue29;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl320

\f0\fs26 \cf2 from sklearn.ensemble import AdaBoostClassifier\
AdaBoostClassifier?\
pwd\
ls\
ls\
ls\
ls\
ls\
ls\
data = pandas.DataFrame.from_csv?\
data = pandas.DataFrame.from_csv\
data = pandas.DataFrame.from_csv?\
index = pandas.DatetimeIndex(start = '01/01/2000', periods = 100, freq = 'd')\
df = pandas.DataFrame(numpy.random.randn(100,), index = index)\
df.head()\
df = pandas.DataFrame(numpy.random.randn(100,), index = numpy.arange(100))\
df.head()\
data = pandas.DataFrame.from_csv('./lemon_training.csv', index_col = None)\
data.head()\
data.shape\
data.columns\
data.dtypes()\
data.dtypes\
data['PurchDate']\
pandas.Timestamp?\
pandas.Timestamp(data['PurchDate'])\
data['PurchDate'][0]\
pandas.Timestamp(data['PurchDate'][0])\
type(data['PurchDate'])\
for value in data['PurchDate']:\
\'a0 \'a0 print value\
timestamp_list = []\
for value in data['PurchDate']:\
\'a0 \'a0 timestamp_list.append( pandas.Timestamp(value) )\
timestamp_list[0]\
timestamp_list[1]\
data['PurchDateStamped'] = timestamp_list\
data['PurchDateStamped'].head()\
type(data['PurchDateStamped'])\
type(data['PurchDateStamped'][0])\
data.dtypes?\
type?\
data['PurchDateStamped'].year()\
data['PurchDateStamped'].year\
data['PurchDateStamped'].year\
data['PurchDateStamped'][0].year\
data.columns\
data.dtypes\
data['Model'].head()\
tmp = pandas.get_dummies(data['Model'])\
tmp.shape\
model_dummy = pandas.get_dummies(data['Model'])\
model = pandas.ols(x = model_dummy, y = data['IsBadBuy'])\
model.p_value\
type(model.p_value)\
model.p_value[ model.p_value < .01]\
model.p_value[ model.p_value < .01].shape\
model.summary_as_matrix\
data.dtypes\
make_dummmies = pandas.get_dummies(data['Make'])\
make_dummmies.shape\
make_logreg = pandas.ols(x = make_dummies, y = data['IsBadBuy'])\
make_logreg = pandas.ols(x = make_dummmies, y = data['IsBadBuy'])\
make_logreg.p_value[make_logreg.p_value < .01]\
make_logreg.p_value[make_logreg.p_value < .01].shape\
make_logreg.beta\
make_dummmies.head()\
data['Make'].value_counts()\
make_ds = pandas.get_dummies(data['Make'])\
make_ols = pandas.ols(x = make_ds, y = data['IsBadBuy'])\
make_ols.p_value[make_ols.p_value < .01]\
}